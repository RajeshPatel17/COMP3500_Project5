(1) How did you separate scheduling mechanism from scheduling policies? 
    I placed scheduling policies in its own functions and implemented the mechanism for deciding which policy to run
    in the main file so it does not affect the policies and is easy to expand.
(2) How did implement the three scheduling algorithms? 
    output at bottom
    FCFS: 
        I took processes off the queue when they arrived and added them to an "arrived" queue. 
        I then processed the "arrived" queue in order
    RR: 
        I took processes off the task queue when they arrived and added them to a queue. 
        I then ran the first process for the desired amount of time. 
        New processes get added to the end of the queue and then the original running process is added back to the end of the queue when it finishes.
        Processes switch when the current process finishes or when it has been executing for the desired length.
    SRTF: 
        I took processes off the task queue when they arrived and added them to a vector. 
        I then calculate which job has the shortest remaining time. I run that process. 
        This process repeats every clock cycle.
        When a process finishes, I then check what the next shortest process is and run that one. 
(3) How did you calculate waiting times?
    end time - arrival time - cpu time 
    or turnaround time - cpu time
(4) How did you calculate response times?
    start time - arrival time
(5) How did you calculate turnaround times?
    end time - arrival time
(6) How did you implement the command-line parser?
    I just used the argv[] array which holds the values being passed and used them in the appropriate places. If the values are out of order, then they will be caught in the program

7.2 (6 points) Generality and Error Checking
(1) How general is your solution?
    The scheduling policies are obviously specific but everything else is general and very expandable
(2) How easy would it be to add a new scheduling policy into your scheduler? 
    Yes it would be easy because I created separate functions for each scheduling policy
(3) Does your program offer input error checking?
    Yes, I am able to check the input for which scheduling policy is chosen and if the RR time quantum is valid.

7.3 (3 points) Miscellaneous factors
(1) Is your code elegant?
    Yes, I utilize existing functions to reduce the inherent complexity of the program and utilize data structures like queues to take advantage of their traits to create elegant code/
(2) How innovative is your solution? Did you try any ideas not suggested here? 
    It is extremely innovative. I utilized existing data structures not explicitly shown in class and utilized c++ to leverage them.
    I implemented queues which facilitate the structure of actually running the program
(3) Did you document all outside sources?
    Yes, they are in the comments


SAMPLE OUTPUTS

DATA
1 0 10
2 0 9
3 3 5
4 7 4
5 10 6
6 10 7

FCFS
./scheduler task.list FCFS
Open file: task.list
The file name is task.list
The chosen policy is FCFS
There are 6 tasks loaded from task.list ...
Press any key to continue ...
=================================================================
<time 0> process 1 is running
<time 1> process 1 is running
<time 2> process 1 is running
<time 3> process 1 is running
<time 4> process 1 is running
<time 5> process 1 is running
<time 6> process 1 is running
<time 7> process 1 is running
<time 8> process 1 is running
<time 9> process 1 is running
<time 10> process 1 is finished...
<time 10> process 2 is running
<time 11> process 2 is running
<time 12> process 2 is running
<time 13> process 2 is running
<time 14> process 2 is running
<time 15> process 2 is running
<time 16> process 2 is running
<time 17> process 2 is running
<time 18> process 2 is running
<time 19> process 2 is finished...
<time 19> process 3 is running
<time 20> process 3 is running
<time 21> process 3 is running
<time 22> process 3 is running
<time 23> process 3 is running
<time 24> process 3 is finished...
<time 24> process 4 is running
<time 25> process 4 is running
<time 26> process 4 is running
<time 27> process 4 is running
<time 28> process 4 is finished...
<time 28> process 5 is running
<time 29> process 5 is running
<time 30> process 5 is running
<time 31> process 5 is running
<time 32> process 5 is running
<time 33> process 5 is running
<time 34> process 5 is finished...
<time 34> process 6 is running
<time 35> process 6 is running
<time 36> process 6 is running
<time 37> process 6 is running
<time 38> process 6 is running
<time 39> process 6 is running
<time 40> process 6 is running
<time 41> process 6 is finished...
<time 41> All processes finished...
=================================================================
average wait time: 14.17
average response time: 14.17
average turnaround time: 21.00
total cpu usage: 100.00 %
=================================================================

RR 5
./scheduler task.list RR 5
time_quantum is set to 5
Open file: task.list
The file name is task.list
The chosen policy is RR
There are 6 tasks loaded from task.list ...
Press any key to continue ...
=================================================================
<time 0> process 1 is running
<time 1> process 1 is running
<time 2> process 1 is running
<time 3> process 1 is running
<time 4> process 1 is running
<time 5> process 2 is running
<time 6> process 2 is running
<time 7> process 2 is running
<time 8> process 2 is running
<time 9> process 2 is running
<time 10> process 3 is running
<time 11> process 3 is running
<time 12> process 3 is running
<time 13> process 3 is running
<time 14> process 3 is running
<time 15> process 3 is finished...
<time 15> process 1 is running
<time 16> process 1 is running
<time 17> process 1 is running
<time 18> process 1 is running
<time 19> process 1 is running
<time 20> process 1 is finished...
<time 20> process 4 is running
<time 21> process 4 is running
<time 22> process 4 is running
<time 23> process 4 is running
<time 24> process 4 is finished...
<time 24> process 5 is running
<time 25> process 5 is running
<time 26> process 5 is running
<time 27> process 5 is running
<time 28> process 5 is running
<time 29> process 6 is running
<time 30> process 6 is running
<time 31> process 6 is running
<time 32> process 6 is running
<time 33> process 6 is running
<time 34> process 2 is running
<time 35> process 2 is running
<time 36> process 2 is running
<time 37> process 2 is running
<time 38> process 2 is finished...
<time 38> process 5 is running
<time 39> process 5 is finished...
<time 39> process 6 is running
<time 40> process 6 is running
<time 41> process 6 is finished...
<time 41> All processes finished...
=================================================================
average wait time: 17.67
average response time: 9.67
average turnaround time: 24.50
total cpu usage: 100.00 % 
=================================================================

SRTF
./scheduler task.list SRTF
Open file: task.list
The file name is task.list
The chosen policy is SRTF
There are 6 tasks loaded from task.list ...
Press any key to continue ...
=================================================================
<time 0> process 2 is running
<time 1> process 2 is running
<time 2> process 2 is running
<time 3> process 3 is running
<time 4> process 3 is running
<time 5> process 3 is running
<time 6> process 3 is running
<time 7> process 3 is running
<time 8> process 3 is finished...
<time 8> process 4 is running
<time 9> process 4 is running
<time 10> process 4 is running
<time 11> process 4 is running
<time 12> process 4 is finished...
<time 12> process 2 is running
<time 13> process 2 is running
<time 14> process 2 is running
<time 15> process 2 is running
<time 16> process 2 is running
<time 17> process 2 is running
<time 18> process 2 is finished...
<time 18> process 5 is running
<time 19> process 5 is running
<time 20> process 5 is running
<time 21> process 5 is running
<time 22> process 5 is running
<time 23> process 5 is running
<time 24> process 5 is finished...
<time 24> process 6 is running
<time 25> process 6 is running
<time 26> process 6 is running
<time 27> process 6 is running
<time 28> process 6 is running
<time 29> process 6 is running
<time 30> process 6 is running
<time 31> process 6 is finished...
<time 31> process 1 is running
<time 32> process 1 is running
<time 33> process 1 is running
<time 34> process 1 is running
<time 35> process 1 is running
<time 36> process 1 is running
<time 37> process 1 is running
<time 38> process 1 is running
<time 39> process 1 is running
<time 40> process 1 is running
<time 41> process 1 is finished...
=================================================================
average wait time: 10.50
average response time: 9.00
average turnaround time: 17.33
total cpu usage: 100.00 %
=================================================================